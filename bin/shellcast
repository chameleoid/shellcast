#!/usr/bin/env node
'use strict';

const uuid = require('node-uuid');
const fetch = require('node-fetch');
const io = require('socket.io-client');
const { spawn } = require('pty.js');

const argv = require('yargs')
  .usage('Usage: $0')

  .options('server', {
    type: 'boolean',
  })

  .options('host', {
    default: 'tty.tv',
    description: 'Shellcast host to connect to',
    type: 'string',
  })

  .options('public', {
    alias: 'p',
    default: false,
    description: 'Show in public broadcast list',
    type: 'boolean',
  })

  .options('ssl', {
    default: true,
    description: 'Use SSL when connecting to a remote host',
    type: 'boolean',
  })

  .options('title', {
    default: `${process.env.USER}'s broadcast`,
    description: 'Title of broadcast',
    type: 'string',
  })

  .help('help')

  .argv;

if (argv.server) {
  require(__dirname + '/../app.js');
} else {
  if (!process.stdin.isTTY) {
    console.error('shellcast expects to be run from a TTY');
    process.exit();
  }

  let host = argv.ssl ? `https://${argv.host}` : `http://${argv.host}`;
  let session = uuid.v4().substr(-12);
  let url = `${host}/t/${session}`;

  fetch(`${url}/c`)
    .then(res => res.json())

    .then(data => {
      let socket = io.connect(`${url}/${data.token}`);
      socket.on('connect', () => shellcast(socket, url));
    });
}

// jshint latedef:false
function shellcast(socket, url) {
  process.env.SHELLCAST = url;
  process.stdout.cursorTo(0, 0);
  process.stdout.clearScreenDown();
  process.env.TERM = 'xterm';

  console.log(`Shellcasting to ${url}`);
  socket.emit('data', `Shellcasting to ${url}\r\n`);

  socket.emit('options', {
    public: argv.public,
    title: argv.title,
  });

  let shell = spawn(process.env.SHELL, [], {
    rows: process.stdout.rows,
    cols: process.stdout.columns,
    env: process.env,
  });

  socket.emit('resize', {
    rows: shell.rows,
    cols: shell.cols,
  });

  process.stdout.on('resize', () => {
    let rows = process.stdout.rows;
    let cols = process.stdout.columns;

    shell.resize(cols, rows);
    socket.emit('resize', {
      rows: rows,
      cols: cols,
    });
  });

  shell.stdout.setEncoding('utf8');
  shell.stdout.on('data', socket.emit.bind(socket, 'data'));
  shell.stdout.on('data', process.stdout.write.bind(process.stdout));
  shell.stdout.on('exit', () => {
    console.error('Shellcasting session ended.');
    process.exit();
  });

  process.stdin.setRawMode(true);
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', shell.write.bind(shell));
  process.stdin.on('end', process.exit.bind(process));

  shell.stdout.resume();
  process.stdin.resume();
}

// vim: set ft=javascript :
